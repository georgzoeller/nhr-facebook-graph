// Generated by CoffeeScript 2.0.1
(function() {
  // https://developers.facebook.com/docs/messenger-platform/send-api-reference
  var MAX_QUICK_REPLIES, MAX_TEXT_LENGTH, MAX_TITLE_LENGTH, clampString;

  MAX_TEXT_LENGTH = 639;

  MAX_TITLE_LENGTH = 20;

  MAX_QUICK_REPLIES = 11;

  // VALID_QUICK_REPLY_CONTENT_TYPES = ['text','location']
  clampString = function(text, limit) {
    if (text.length <= limit) {
      return text;
    }
    return text.substr(0, limit - 1);
  };

  module.exports = function(context) {
    var ChatMessageBuilder;
    return {
      ChatMessageBuilder: ChatMessageBuilder = class ChatMessageBuilder extends context.RequestBuilder {
        constructor(context, opts) {
          super(context, opts);
          this.addJson('message', {});
          this.message = this.opts.json.message;
        }

        setRecipient(user_id) {
          this.addJson('recipient', {
            id: user_id
          });
          return this;
        }

        setText(text) {
          this.message.text = clampString(text, MAX_TEXT_LENGTH);
          return this;
        }

        setAttachment(type, payload) {
          //throw new Error("Both type and payload must be set") if not type? or not payload?
          this.message.attachment = {
            type: type,
            payload: payload
          };
          return this;
        }

        attachImageUrl(url) {
          this.setAttachment('image', {
            url: url
          });
          return this;
        }

        attachVideoUrl(url) {
          this.setAttachment('video', {
            url: url
          });
          return this;
        }

        attachFileUrl(url) {
          this.setAttachment('file', {
            url: url
          });
          return this;
        }

        attachAudioUrl(url) {
          this.setAttachment('audio', {
            url: url
          });
          return this;
        }

        addLocationQuickReply(title = 'Send location') {
          var base;
          if ((base = this.message).quick_replies == null) {
            base.quick_replies = [];
          }
          this.message.quick_replies.push({
            title: clampString(title, MAX_TITLE_LENGTH),
            content_type: 'location'
          });
          return this;
        }

        addQuickReplies(replies = []) {
          var i, len, reply;
          for (i = 0, len = replies.length; i < len; i++) {
            reply = replies[i];
            this.addQuickReply(reply.title, reply.payload, reply.image);
          }
          return this;
        }

        // add a quick reply. If payload is not defined, it will default to title
        addQuickReply(title, payload, image) {
          var base, qr;
          if ((base = this.message).quick_replies == null) {
            base.quick_replies = [];
          }
          if (this.message.quick_replies.length >= MAX_QUICK_REPLIES) {
            this.debug(`Warning: Quick Reply Limit is 11, not adding ${title}`);
            return this;
          }
          qr = {
            content_type: 'text',
            title: clampString(title, MAX_TITLE_LENGTH),
            payload: payload || title
          };
          if (image != null) {
            qr.image_url = image;
          }
          this.message.quick_replies.push(qr);
          return this;
        }

      },
      createMessage: function(opts) {
        return new ChatMessageBuilder(context, opts);
      },
      sendMessageJson: function(recipient, messageJson) {
        return context.createCall({
          endpoint: 'me/messages'
        }).describe(`Sending chat message to ${recipient}: ${messageJson}`).setMethod('POST').authorizeByToken().setJson({
          recipient: {
            id: recipient
          },
          message: messageJson
        });
      },
      sendText: function(recipient, text, quick_replies) {
        return context.customCall(ChatMessageBuilder, {
          endpoint: 'me/messages'
        }).describe(`Sending chat message to ${recipient}: ${text}`).setMethod('POST').authorizeByToken().setRecipient(recipient).setText(text).addQuickReplies(quick_replies);
      },
      sendImage: function(recipient, url) {
        return context.customCall(ChatMessageBuilder, {
          endpoint: 'me/messages'
        }).describe(`Sending image to ${recipient}: ${url}`).setMethod('POST').authorizeByToken().setRecipient(recipient).attachImageUrl(url);
      },
      sendTemplate: function(recipient, payload) {
        return context.customCall(ChatMessageBuilder, {
          endpoint: 'me/messages'
        }).describe(`Sending template to ${recipient}: ${payload}`).setMethod('POST').authorizeByToken().setRecipient(recipient).setAttachment('template', payload);
      },
      setTypingIndicator: function(recipient, turnOn = true) {
        var state;
        if (turnOn) {
          state = 'on';
        } else {
          state = 'off';
        }
        return context.createCall({
          endpoint: 'me/messages'
        }).describe(`Setting typing indicator for ${recipient} to ${state}`).setMethod('POST').authorizeByToken().setJson({
          recipient: {
            id: recipient
          },
          sender_action: `typing_${state}`
        });
      }
    };
  };

}).call(this);
